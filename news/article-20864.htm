<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://surgenode.github.io/news/article-20864.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>FP-growth算法以及代码实现</title>
        <meta name="description" content="FP-growth算法以及代码实现 FP-growth算法介绍 FP-growth算法，它被用于挖掘频繁项集，它把数据集存储为一个叫FP树的数据结构里，这样可以更高效地发现频繁项集或频繁项对。 FP树" />
        <link rel="icon" href="/assets/website/img/surgenode/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/website/css/surgenode/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/surgenode/style.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/website/css/surgenode/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-D3FHW0TV6C"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-D3FHW0TV6C');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header-section start -->
<div class="header navbar-fixed-top">
    <div class="container">
        <div class="row">
            <div class="col-lg-4 col-md-2 col-sm-12 col-xs-12">
                                <a href="/" class="navbar-brand">
                    Surge Node
                </a>
                            </div>
            <div class="col-lg-8 col-md-10 col-sm-12 col-xs-12">
                <div class="navigation">
                    <div id="navigation">
                        <ul>
                                                        <li><a href="/" title="首页">首页</a></li>
                                                        <li><a href="/free-nodes/" title="免费节点">免费节点</a></li>
                                                        <li><a href="/paid-subscribe/" title="推荐机场">推荐机场</a></li>
                                                        <li><a href="/news/" title="新闻资讯">新闻资讯</a></li>
                                                        <li><a href="#">关于</a></li>
                            <li><a href="#">联系</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- header-section close -->
    <!-- header-section close -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="page-section">
                    <div class="col-md-6">
                        <div class="page-description">
                            <h1 class="page-title">FP-growth算法以及代码实现</h1>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="page-breadcrumb">
                            <ol class="breadcrumb">
                                <li><a href="/">首页</a></li>
                                <li><a href="/news/">新闻资讯</a></li>
                                <li>正文</li>
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--pageheader close -->
        <!-- hero-section close -->
    <div class="space-medium">
        <!-- service-section start -->
        <div class="container">
            <div class="row">
                <!-- service start -->
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="FPgrowth_0" rel="nofollow"></a>FP-growth算法以及代码实现</h2> <p><strong>FP-growth算法介绍</strong><br /> FP-growth算法，它被用于挖掘频繁项集，它把数据集存储为一个叫FP树的数据结构里，这样可以更高效地发现频繁项集或频繁项对。</p> <p><strong>FP树</strong><br /> FP即Frequent Pattern，FP树看上去就是一棵前缀树，根节点是空集，结点上是单个元素，保存了它在数据集中的出现次数，出现次数越多的元素越接近根。此外，结点之间通过链接（link）相连，只有相似元素会被连起来，连起来的元素又可以看成链表。同一个元素可以在FP树中多次出现，根据位置不同，对应着不同的频繁项集。可以为FP树设置最小支持度，过滤掉出现次数太少的元素。<br /> FP树每个结点上都是一个单独的元素，及其在路径中的出现次数。</p> <p><strong>构建FP树</strong><br /> 1.遍历一次数据集，统计每个元素出现的次数，然后把出现次数较小的滤掉，然后对每个样本按照元素出现次数重排序<br /> 2.构造FP树。从根节点∅开始，将过滤并排序后的样本一个个加入树中，若FP树不存在现有元素则添加分支，若存在则增加相应的值。</p> <p>每个样本都是排序过的，频数高的频繁项集在前面，它总是更接近根结点，所以也可以把每个样本看成一棵子树，而我们要做的就是把子树添加到FP树里</p> <p><strong>FP树构建实例</strong><br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/8997a38616092cdcadd727bd2b7cc8b2.jpg"><br /> 根据此数据集构造的FP树为：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/c5b95874b7b6b51c5983459c22b72f16.jpg"><br /><strong>从FP树挖掘频繁项集</strong><br /> 步骤如下：<br /> 1.从FP树提取条件模式基<br /> 2.用条件模式基构造FP树<br /> 3.重复1和2直到树只包含一个元素<br /><strong>提取条件模式基</strong><br /> 条件模式基（conditional pattern base）定义为以所查找元素为结尾的所有前缀路径（prefix path）的集合。我们要做的就是从header列表开始，针对每一个频繁项，都查找其对应的条件模式基。<br /> 上述实例路径：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/87284c4fd6432b801db05ca6f49b05ae.jpg"><br /> 频繁项集：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/9238b527667e5c1550aba0db8430a56a.jpg"><br /><strong>代码实现</strong></p> <pre><code class="prism language-python"><span class="token keyword">class</span><span class="token class-name">treeNode</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nameValue<span class="token punctuation">,</span> numOccur<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>name<span class="token operator">=</span> nameValue         self<span class="token punctuation">.</span>count<span class="token operator">=</span> numOccur         self<span class="token punctuation">.</span>nodeLink<span class="token operator">=</span><span class="token boolean">None</span>         self<span class="token punctuation">.</span>parent<span class="token operator">=</span> parentNode         self<span class="token punctuation">.</span>children<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">def</span><span class="token function">inc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numOccur<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>count<span class="token operator">+=</span> numOccur<span class="token keyword">def</span><span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ind<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  '</span><span class="token operator">*</span> ind<span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token keyword">for</span> child<span class="token keyword">in</span> self<span class="token punctuation">.</span>children<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             child<span class="token punctuation">.</span>disp<span class="token punctuation">(</span>ind<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 当出现两个或两个以上的相似项时，找到最后一个相似项的实例，让该实例的self.nodeLink属性保存新出现的相似项</span><span class="token comment"># 效果如同是在一条链的最后一个节点后再接入一个节点，这些链就是self.nodeLink</span><span class="token keyword">def</span><span class="token function">updateHeader</span><span class="token punctuation">(</span>nodeToTest<span class="token punctuation">,</span> targetNode<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> nodeToTest<span class="token punctuation">.</span>nodeLink<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>         nodeToTest<span class="token operator">=</span> nodeToTest<span class="token punctuation">.</span>nodeLink     nodeToTest<span class="token punctuation">.</span>nodeLink<span class="token operator">=</span> targetNode<span class="token comment"># 接收处理好的事务列表，画出FP树</span><span class="token keyword">def</span><span class="token function">updateFPtree</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> inTree<span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">in</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">:</span><span class="token comment"># 判断items的第一个结点是否已作为子结点</span>         inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>inc<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment"># 创建新的分支</span>         inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> treeNode<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> inTree<span class="token punctuation">)</span><span class="token comment"># 更新相应频繁项集的链表，往后添加</span><span class="token keyword">if</span> headerTable<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">:</span>             headerTable<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>             updateHeader<span class="token punctuation">(</span>headerTable<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 递归</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">:</span>         updateFPtree<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token comment"># 输入字典格式的事务和最小支持度，返回FP树和项头表</span><span class="token keyword">def</span><span class="token function">createFPtree</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> minSup<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     headerTable<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">for</span> trans<span class="token keyword">in</span> dataSet<span class="token punctuation">:</span><span class="token keyword">for</span> item<span class="token keyword">in</span> trans<span class="token punctuation">:</span>             headerTable<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span> headerTable<span class="token punctuation">.</span>get<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span> dataSet<span class="token punctuation">[</span>trans<span class="token punctuation">]</span><span class="token keyword">for</span> k<span class="token keyword">in</span><span class="token builtin">list</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;</span> minSup<span class="token punctuation">:</span><span class="token keyword">del</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 删除不满足最小支持度的元素</span>     freqItemSet<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 满足最小支持度的频繁项集</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>freqItemSet<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token keyword">for</span> k<span class="token keyword">in</span> headerTable<span class="token punctuation">:</span>         headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token comment"># element: [count, node]</span>     retTree<span class="token operator">=</span> treeNode<span class="token punctuation">(</span><span class="token string">'Null Set'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">for</span> tranSet<span class="token punctuation">,</span> count<span class="token keyword">in</span> dataSet<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         localD<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">for</span> item<span class="token keyword">in</span> tranSet<span class="token punctuation">:</span><span class="token keyword">if</span> item<span class="token keyword">in</span> freqItemSet<span class="token punctuation">:</span><span class="token comment"># 过滤，只取该样本中满足最小支持度的频繁项</span>                 localD<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span> headerTable<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># element : count</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>localD<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token comment"># 根据全局频数从大到小对单样本排序</span>             orderedItem<span class="token operator">=</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> v<span class="token keyword">in</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>localD<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#print('orderItems=', orderedItem)</span><span class="token comment"># 用过滤且排序后的样本更新树</span>             updateFPtree<span class="token punctuation">(</span>orderedItem<span class="token punctuation">,</span> retTree<span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token keyword">return</span> retTree<span class="token punctuation">,</span> headerTable<span class="token comment"># 构造成 element : count 的形式，以字典形式输出</span><span class="token keyword">def</span><span class="token function">createInitSet</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>     retDict<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">for</span> trans<span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>         trans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'，'</span><span class="token punctuation">)</span>         key<span class="token operator">=</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token keyword">if</span> key<span class="token keyword">in</span> retDict<span class="token punctuation">:</span>             retDict<span class="token punctuation">[</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>             retDict<span class="token punctuation">[</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">return</span> retDict<span class="token comment"># 递归回溯，找到给定节点往上回溯到根节点的路径，并把路径存到列表中</span><span class="token keyword">def</span><span class="token function">ascendFPtree</span><span class="token punctuation">(</span>leafNode<span class="token punctuation">,</span> prefixPath<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> leafNode<span class="token punctuation">.</span>parent<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>         prefixPath<span class="token punctuation">.</span>append<span class="token punctuation">(</span>leafNode<span class="token punctuation">.</span>name<span class="token punctuation">)</span>         ascendFPtree<span class="token punctuation">(</span>leafNode<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> prefixPath<span class="token punctuation">)</span><span class="token comment"># 找到给定元素名称的条件模式基，以字典格式存贮</span><span class="token keyword">def</span><span class="token function">findPrefixPath</span><span class="token punctuation">(</span>basePat<span class="token punctuation">,</span> myHeaderTab<span class="token punctuation">)</span><span class="token punctuation">:</span>     treeNode<span class="token operator">=</span> myHeaderTab<span class="token punctuation">[</span>basePat<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># basePat在FP树中的第一个结点</span>     condPats<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">while</span> treeNode<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>         prefixPath<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>         ascendFPtree<span class="token punctuation">(</span>treeNode<span class="token punctuation">,</span> prefixPath<span class="token punctuation">)</span><span class="token comment"># prefixPath是倒过来的，从treeNode开始到根</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>prefixPath<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">:</span>             condPats<span class="token punctuation">[</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>prefixPath<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span> treeNode<span class="token punctuation">.</span>count<span class="token comment"># 关联treeNode的计数</span>         treeNode<span class="token operator">=</span> treeNode<span class="token punctuation">.</span>nodeLink<span class="token comment"># 下一个basePat结点</span><span class="token keyword">return</span> condPats<span class="token keyword">def</span><span class="token function">mineFPtree</span><span class="token punctuation">(</span>inTree<span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> minSup<span class="token punctuation">,</span> preFix<span class="token punctuation">,</span> freqItemList<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 最开始的频繁项集是headerTable中的各元素</span>     bigL<span class="token operator">=</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> v<span class="token keyword">in</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 根据频繁项的总频次排序</span><span class="token comment">#print("bigL:  ",bigL)</span><span class="token keyword">for</span> basePat<span class="token keyword">in</span> bigL<span class="token punctuation">:</span><span class="token comment"># 对每个频繁项</span>         newFreqSet<span class="token operator">=</span> preFix<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>         newFreqSet<span class="token punctuation">.</span>add<span class="token punctuation">(</span>basePat<span class="token punctuation">)</span>         freqItemList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>newFreqSet<span class="token punctuation">)</span>         condPattBases<span class="token operator">=</span> findPrefixPath<span class="token punctuation">(</span>basePat<span class="token punctuation">,</span> headerTable<span class="token punctuation">)</span><span class="token comment"># 当前频繁项集的条件模式基</span>         myCondTree<span class="token punctuation">,</span> myHead<span class="token operator">=</span> createFPtree<span class="token punctuation">(</span>condPattBases<span class="token punctuation">,</span> minSup<span class="token punctuation">)</span><span class="token comment"># 构造当前频繁项的条件FP树</span><span class="token keyword">if</span> myHead<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>             mineFPtree<span class="token punctuation">(</span>myCondTree<span class="token punctuation">,</span> myHead<span class="token punctuation">,</span> minSup<span class="token punctuation">,</span> newFreqSet<span class="token punctuation">,</span> freqItemList<span class="token punctuation">)</span><span class="token comment"># 递归挖掘条件FP树</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>     parsedDat<span class="token operator">=</span><span class="token punctuation">[</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line<span class="token keyword">in</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'FPGrowth_datasets/shopping_cart.csv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>     initSet<span class="token operator">=</span> createInitSet<span class="token punctuation">(</span>parsedDat<span class="token punctuation">)</span>     myFPtree<span class="token punctuation">,</span> myHeaderTab<span class="token operator">=</span> createFPtree<span class="token punctuation">(</span>initSet<span class="token punctuation">)</span>     myFPtree<span class="token punctuation">.</span>disp<span class="token punctuation">(</span><span class="token punctuation">)</span>     myFreqList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     mineFPtree<span class="token punctuation">(</span>myFPtree<span class="token punctuation">,</span> myHeaderTab<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myFreqList<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"频繁项集的数量是: %s"</span><span class="token operator">%</span><span class="token builtin">len</span><span class="token punctuation">(</span>myFreqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item<span class="token keyword">in</span> myFreqList<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-20408.htm">家养泰迪出售（自家泰迪出售）</a></p>
                                        <p>下一个：<a href="/news/article-20866.htm">动物接种疫苗,剂量越大越好吗,为什么? 动物接种疫苗,剂量越大越好吗,为什么</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-12-16-free-node-subscribe-links.htm" title="「12月16日」最高速度20.9M/S，2024年Surge每天更新免费节点订阅链接">「12月16日」最高速度20.9M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-33470.htm" title="让猫挠了出血用***不（让猫挠了出血需要打几针）">让猫挠了出血用***不（让猫挠了出血需要打几针）</a></li>
                        <li class="py-2"><a href="/news/article-21726.htm" title="动物疫苗去哪里买便宜又好（动物疫苗证去哪里办怎么办）">动物疫苗去哪里买便宜又好（动物疫苗证去哪里办怎么办）</a></li>
                        <li class="py-2"><a href="/news/article-28725.htm" title="python初始化方法">python初始化方法</a></li>
                        <li class="py-2"><a href="/news/article-26399.htm" title="动物疫苗的种类有哪些,各有什么特点呢图片（动物疫苗的种类有哪些,各有什么特点呢图片视频）">动物疫苗的种类有哪些,各有什么特点呢图片（动物疫苗的种类有哪些,各有什么特点呢图片视频）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-24-free-node-subscribe.htm" title="「12月24日」最高速度21.8M/S，2024年Surge每天更新免费节点订阅链接">「12月24日」最高速度21.8M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-17-free-node-subscribe.htm" title="「9月17日」最高速度18.1M/S，2024年Surge每天更新免费节点订阅链接">「9月17日」最高速度18.1M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-33940.htm" title="中国十大宠物食品公司 中国十大宠物食品公司排名">中国十大宠物食品公司 中国十大宠物食品公司排名</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-20-node-share.htm" title="「8月20日」最高速度22.4M/S，2024年Surge每天更新免费节点订阅链接">「8月20日」最高速度22.4M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-4-node-share.htm" title="「12月4日」最高速度18M/S，2024年Surge每天更新免费节点订阅链接">「12月4日」最高速度18M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">9</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
                <!-- service close -->
            </div>
        </div>
        <!-- service-section close -->
    </div>
        <!-- footer start -->
    <div class="tiny-footer">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    Surge Node节点订阅站 版权所有 Powered by WordPress
                </div>
            </div>
        </div>
    </div>
    <!-- footer close -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/website/js/frontend/surgenode/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/website/js/frontend/surgenode/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/surgenode/menumaker.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/surgenode/navigation.js" type="text/javascript"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>