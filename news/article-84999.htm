<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://surgenode.github.io/news/article-84999.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>C#自定义配置文件方法详解_在线工具</title>
        <meta name="description" content=".NET程序中，经常使用Config文件来配置应用程序中经常使用的值，比如数据库连接字符串。最近项目遇到一个需要配置好多节点在配置文件中的需求。为了使配置节点整洁易维护，在代码调用时也保证获取时比较直" />
        <link rel="icon" href="/assets/website/img/surgenode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Surge Node节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://surgenode.github.io/news/article-84999.htm" />
    <meta property="og:site_name" content="Surge Node节点订阅站" />
    <meta property="og:title" content="C#自定义配置文件方法详解_在线工具" />
    <meta property="og:image" content="https://surgenode.github.io/uploads/20240723/caa9a217a7b44d220cd94af2d5c3ca2c.webp" />
        <meta property="og:release_date" content="2025-03-30T09:37:03" />
    <meta property="og:updated_time" content="2025-03-30T09:37:03" />
        <meta property="og:description" content=".NET程序中，经常使用Config文件来配置应用程序中经常使用的值，比如数据库连接字符串。最近项目遇到一个需要配置好多节点在配置文件中的需求。为了使配置节点整洁易维护，在代码调用时也保证获取时比较直" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="C#自定义配置文件方法详解_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Bootstrap -->
    <link href="/assets/website/css/surgenode/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/surgenode/style.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/website/css/surgenode/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-D3FHW0TV6C"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-D3FHW0TV6C');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header-section start -->
<div class="header navbar-fixed-top">
    <div class="container">
        <div class="row">
            <div class="col-lg-4 col-md-2 col-sm-12 col-xs-12">
                <a href="/" class="navbar-brand">
                                <span>Surge Node</span>
                                </a>
            </div>
            <div class="col-lg-8 col-md-10 col-sm-12 col-xs-12">
                <div class="navigation">
                    <div id="navigation">
                        <ul>
                                                        <li><a href="/" title="首页">首页</a></li>
                                                        <li><a href="/free-nodes/" title="免费节点">免费节点</a></li>
                                                        <li><a href="/paid-subscribe/" title="推荐机场">推荐机场</a></li>
                                                        <li><a href="/client.htm" title="客户端">客户端</a></li>
                                                        <li><a href="/news/" title="新闻资讯">新闻资讯</a></li>
                                                    </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- header-section close -->
    <!-- header-section close -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="page-section">
                    <div class="col-md-6">
                        <div class="page-description">
                            <h1 class="page-title">C#自定义配置文件方法详解_在线工具</h1>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="page-breadcrumb">
                            <ol class="breadcrumb">
                                <li><a href="/">首页</a></li>
                                <li><a href="/news/">新闻资讯</a></li>
                                <li>正文</li>
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--pageheader close -->
        <!-- hero-section close -->
    <div class="space-medium">
        <!-- service-section start -->
        <div class="container">
            <div class="row">
                <!-- service start -->
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <blockquote> <p>.NET程序中，经常使用Config文件来配置应用程序中经常使用的值，比如数据库连接字符串。最近项目遇到一个需要配置好多节点在配置文件中的需求。为了使配置节点整洁易维护，在代码调用时也保证获取时比较直观，结合自定义配置文件专门整理了一个配置文件帮助类Demo。此篇文章主要讲述自定义配置文件的使用方法。</p> </blockquote> <hr/> <h3 id="常见配置文件使用方法">常见配置文件使用方法</h3> <ul> <li>直接在connectionStrings\appSettings这两个节点中添加add节点配置 <ul> <li>这种方式在项目中很常见，使用简单，这里不做介绍</li> </ul> </li> <li>文件操作 <ul> <li>很多程序中（自己公司老项目），通过获取指定路径下XML\ini\json\txt等文件，通过IO获取文件内容并对文件进行解析，从而获取程序需要的配置信息（不推荐）</li> </ul> </li> </ul> <h3 id="自定义配置文件">自定义配置文件</h3> <p>在App.Config(web.config)中指定其他配置文件的路径和节点。<br /> 在configSections节点下配置section节点，.NET提供自带的类型进行封装。（NameValue键值对、Dictionary字典、SingTag基础结构）。Section节点的name属性是自定义节点的名称，type是接收信息的数据类型。<br /><strong>注意！configSections节点必须为configuration下第一个节点</strong></p> <blockquote> <p><kbd>configSections</kbd>的<kbd>name</kbd>属性为自定义配置节点的名称，<kbd>type<kbd> 为转换的类型</kbd></kbd></p> <p><code>ConfigurationManager.GetSection("name")</code> 方法的参数是自定义配置文件节点的名称</p> </blockquote> <h4 id="namevalue键值对">NameValue键值对</h4> <p>配置语法格式：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;configuration&gt; 	&lt;configSections&gt; 		&lt;!--以NameValueCollection键值对的形式返回配置节点中的信息，type值固定为System.Configuration.NameValueSectionHandler--&gt; 		&lt;section name="NameValueConfigNode" type="System.Configuration.NameValueSectionHandler"/&gt; 	&lt;/configSections&gt; 	&lt;!--自定义配置节点--&gt; 	&lt;NameValueConfigNode&gt; 		&lt;add key="Name一" value="Value一" /&gt; 		&lt;add key="Name二" value="Value二" /&gt; 		&lt;add key="Name三" value="Value三" /&gt; 	&lt;/NameValueConfigNode&gt;     &lt;startup&gt;          &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" /&gt;     &lt;/startup&gt; &lt;/configuration&gt;</code></pre> <p>调用方法：这里以一个静态属性的方法获取并返回Dictionary格式（后面几种方法也采用这个方式）</p> <pre><code class="language-CSharp">/// &lt;summary&gt; /// NameValueCollection /// &lt;/summary&gt; public static Dictionary&lt;string, string&gt; NameValueConfigNode {     get     {         NameValueCollection nvc = (NameValueCollection)ConfigurationManager.GetSection("NameValueConfigNode");         Dictionary&lt;string, string&gt; result = new Dictionary&lt;string,string&gt;();          foreach (string key in nvc.AllKeys)         {              result.Add(key, nvc[key]);         }         return result;     } }</code></pre> <h4 id="dictionary">Dictionary</h4> <p>配置文件语法格式：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;configuration&gt; 	&lt;configSections&gt; 		&lt;!--以Dictionary字典的形式返回配置节点中的信息，type固定为System.Configuration.DictionarySectionHandler--&gt; 		&lt;section name="DictionaryConfigNode" type="System.Configuration.DictionarySectionHandler"/&gt; 	&lt;/configSections&gt; 	&lt;!--自定义配置节点--&gt; 	&lt;DictionaryConfigNode&gt; 		&lt;add key="Key一" value="DictValue一" /&gt; 		&lt;add key="Key二" value="DictValue二" /&gt; 		&lt;add key="Key三" value="DictValue三" /&gt; 	&lt;/DictionaryConfigNode&gt;     &lt;startup&gt;          &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" /&gt;     &lt;/startup&gt; &lt;/configuration&gt;</code></pre> <p>调用方法：</p> <pre><code class="language-CSharp">/// &lt;summary&gt; /// Dictionary /// &lt;/summary&gt; public static Dictionary&lt;string, string&gt; DictionaryConfigNode {     get     {         IDictionary dict = (IDictionary)ConfigurationManager.GetSection("DictionaryConfigNode");         Dictionary&lt;string, string&gt; result = new Dictionary&lt;string, string&gt;();         foreach (string key in dict.Keys)         {             result.Add(key, dict[key].ToString());         }         return result;     } }</code></pre> <h4 id="singtag">SingTag</h4> <p>配置文件语法格式：</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;configuration&gt; 	&lt;configSections&gt; 		&lt;!--基础结构处理 .config 文件中由单个 XML 标记所表示的各配置节点中的值，type固定为System.Configuration.SingleTagSectionHandler--&gt; 		&lt;section name="SingleTagConfigNode" type="System.Configuration.SingleTagSectionHandler" /&gt; 	&lt;/configSections&gt; 	&lt;!--自定义配置节点--&gt; 	&lt;!--注意，只能是单个节SingleTagSectionHandler才能处理，无论有多少个属性都能处理--&gt; 	&lt;SingleTagConfigNode PropertyOne="1" PropertyTwo="2" PropertyThree="3" PropertyFour="4" PropertyFive="5" /&gt;     &lt;startup&gt;          &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" /&gt;     &lt;/startup&gt; &lt;/configuration&gt;</code></pre> <p>调用方法：</p> <pre><code class="language-CSharp">/// &lt;summary&gt; /// SingleTag /// &lt;/summary&gt; public static Dictionary&lt;string, string&gt; SingleTagConfigNode {     get     {         Hashtable dict = (Hashtable)ConfigurationManager.GetSection("SingleTagConfigNode");         Dictionary&lt;string, string&gt; result = new Dictionary&lt;string, string&gt;();         foreach (string key in dict.Keys)         {             result.Add(key, dict[key].ToString());         }         return result;     } }</code></pre> <p><font color="red">以上程序通过控制台应用程序测试调用效果如下:</font></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://imgtu.com/i/Lsbv5T"  target="_blank" rel="nofollow"><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d779a13309c55b97bfd760bd3b6571cd.jpg" alt="C#自定义配置文件方法详解_在线工具"></a></p> <h4 id="自定义配置文件-1">自定义配置文件</h4> <p>以上三种方法，只能读取应用程序的Web.config或者app.config中的配置信息，但是在大多数项目中，业务场景复杂，配置信息更是多到看不过来，所以如果都写在web.config或者app.config中的话，不太美观，也不易维护。</p> <p>那么有没有一种方法，可以根据需要，配置一个或者多个的config，并且在程序中直接调用使用的方法？<code>（问就是有^_^）</code></p> <p>下面举例一种自定义配置文件的写法<br /> 配置文件写法：<br /><kbd>&lt;configSections&gt;</kbd>节点下<kbd>&lt;section&gt;</kbd>的属性值内容与上面三个方法相同。需要注意的是自定义节点，自定义节点只需要设置configSource属性即可，属性值指向自定义配置文件的路径；<br /><font color="red">注意：路径必须要写成相对路径。</font></p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;configuration&gt; 	&lt;configSections&gt; 		&lt;!--把MyConfigData节点的数据映射到MyConfigData类中--&gt; 		&lt;section name="MyConfigData" type="ConsoleApplication.ConfigFiles.ConfigFile,ConsoleApplication"/&gt; 	&lt;/configSections&gt; 	&lt;!--自定义配置节点，configSource指定自定义配置文件的路径（必须是相对路径）--&gt; 	&lt;MyConfigData configSource="ConfigFiles\Framework.config"/&gt;     &lt;startup&gt;          &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" /&gt;     &lt;/startup&gt; &lt;/configuration&gt;</code></pre> <p>这是自定义的文件内容,</p> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;MyConfigData&gt; 	&lt;add key="Key一" value="自定义文件一" /&gt; 	&lt;add key="Key二" value="自定义文件二" /&gt; 	&lt;add key="Key三" value="自定义文件三" /&gt; &lt;/MyConfigData&gt;</code></pre> <p><font color="DarkGreen">程序中的调用方法与上面的方式一致，这种自定义配置文件的精髓在于，不用将所有配置信息都挤在一个文件中，而是根据项目需要合理的分成多个配置，只需要在web.config或者app.config中指定文件路径即可。其他使用方法没有差别</font></p> <h4 id="自定义结构配置文件">自定义结构配置文件</h4> <p>以上方法为常用的基本配置文件的使用方法，都是使用C#提供的类型进行获取，配置文件的节点需要按照对应格式设置，C#中还有一种可以自定义配置文件格式的调用方法，Config中科自定义节点的结构，然后在程序中需要自定义一个配置文件的类，用于接收自定义配置文件的内容；<br /> 其中使用到的类型：<br /> ConfigurationSection、ConfigurationElementCollection、ConfigurationElement、ConfigurationProperty<br /> 上面介绍的几种方法基本上已经足够日常使用，此篇文章不在进行介绍自定义格式的写法，后期会根据个人情况（是否懒惰的情况），可能会补充此部分功能，有兴趣可以去了解一下。</p> <h3 id="写在最后">写在最后</h3> <p>以上源代码已经放在Gitee上，可自行下载，<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/yang-yong-666/csharp"  target="_blank" rel="nofollow">https://gitee.com/yang-yong-666/csharp</a><br /> 该项目还包含其他关于C#的帮助类，并且会持续更新！</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-84998.htm">导入导出接口写法</a></p>
                                        <p>下一个：<a href="/news/article-85707.htm">纯手工宠物零食怎么做（diy宠物零食）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-77995.htm" title="最有名的动物医院是哪个（中国最好的动物医学）">最有名的动物医院是哪个（中国最好的动物医学）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-26-free-node-subscribe-links.htm" title="「2月26日」最高速度21.7M/S，2025年Surge每天更新免费节点订阅链接">「2月26日」最高速度21.7M/S，2025年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-36812.htm" title="动物医学研究疫苗（动物医学研究疫苗吗）">动物医学研究疫苗（动物医学研究疫苗吗）</a></li>
                        <li class="py-2"><a href="/news/article-56121.htm" title="广州宠物收容中心电话地址查询（广州市宠物收容中心）">广州宠物收容中心电话地址查询（广州市宠物收容中心）</a></li>
                        <li class="py-2"><a href="/news/article-57813.htm" title="mysql 中count函数的使用方法_MySQL中count函数使用方法详解">mysql 中count函数的使用方法_MySQL中count函数使用方法详解</a></li>
                        <li class="py-2"><a href="/news/article-60107.htm" title="动物打防疫针的作用（动物打疫苗）">动物打防疫针的作用（动物打疫苗）</a></li>
                        <li class="py-2"><a href="/news/article-46212.htm" title="动物医疗中心 动物医疗中心和动物医院的区别">动物医疗中心 动物医疗中心和动物医院的区别</a></li>
                        <li class="py-2"><a href="/news/article-48515.htm" title="动物医院介绍资料 动物医院介绍资料大全">动物医院介绍资料 动物医院介绍资料大全</a></li>
                        <li class="py-2"><a href="/news/article-52830.htm" title="Spring Boot Admin 的使用">Spring Boot Admin 的使用</a></li>
                        <li class="py-2"><a href="/news/article-51218.htm" title="宠物粮的主要成分有哪些（宠物粮是用啥做成的）">宠物粮的主要成分有哪些（宠物粮是用啥做成的）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
                <!-- service close -->
            </div>
        </div>
        <!-- service-section close -->
    </div>
        <!-- footer start -->
    <div class="tiny-footer">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    Surge Node节点订阅站 版权所有 Powered by WordPress
                </div>
            </div>
        </div>
    </div>
    <!-- footer close -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/website/js/frontend/surgenode/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/website/js/frontend/surgenode/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/surgenode/menumaker.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/surgenode/navigation.js" type="text/javascript"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>