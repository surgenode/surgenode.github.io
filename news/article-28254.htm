<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://surgenode.github.io/news/article-28254.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>用 Python 定义 Schema 并生成 Parquet 文件</title>
        <meta name="description" content="  原来用 Java 和 Python 实现过 Avro 转换成 Parquet 格式，所以 Schema 都是在 Avro 中定义的。这里要尝试的是如何定义 Parquet 的 Schema, 然后" />
        <link rel="icon" href="/assets/website/img/surgenode/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/website/css/surgenode/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/surgenode/style.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/website/css/surgenode/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-D3FHW0TV6C"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-D3FHW0TV6C');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header-section start -->
<div class="header navbar-fixed-top">
    <div class="container">
        <div class="row">
            <div class="col-lg-4 col-md-2 col-sm-12 col-xs-12">
                                <a href="/" class="navbar-brand">
                    Surge Node
                </a>
                            </div>
            <div class="col-lg-8 col-md-10 col-sm-12 col-xs-12">
                <div class="navigation">
                    <div id="navigation">
                        <ul>
                                                        <li><a href="/" title="首页">首页</a></li>
                                                        <li><a href="/free-nodes/" title="免费节点">免费节点</a></li>
                                                        <li><a href="/paid-subscribe/" title="推荐机场">推荐机场</a></li>
                                                        <li><a href="/news/" title="新闻资讯">新闻资讯</a></li>
                                                        <li><a href="#">关于</a></li>
                            <li><a href="#">联系</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- header-section close -->
    <!-- header-section close -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="page-section">
                    <div class="col-md-6">
                        <div class="page-description">
                            <h1 class="page-title">用 Python 定义 Schema 并生成 Parquet 文件</h1>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="page-breadcrumb">
                            <ol class="breadcrumb">
                                <li><a href="/">首页</a></li>
                                <li><a href="/news/">新闻资讯</a></li>
                                <li>正文</li>
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--pageheader close -->
        <!-- hero-section close -->
    <div class="space-medium">
        <!-- service-section start -->
        <div class="container">
            <div class="row">
                <!-- service start -->
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-dracula"> <p>  原来用 Java 和 Python 实现过 Avro 转换成 Parquet 格式，所以 Schema 都是在 Avro 中定义的。这里要尝试的是如何定义 Parquet 的 Schema, 然后据此填充数据并生成 Parquet 文件。</p> <p>  本文将演示两个例子，一个是没有层级的两个字段，另一个是含于嵌套级别的字段，将要使用到的 Python 模块有 pandas 和 pyarrow</p> <h3> <a id="_4" rel="nofollow"></a>简单字段定义</h3> <h3> <a id="_Schema__Parquet__5" rel="nofollow"></a>定义 Schema 并生成 Parquet 文件</h3> <pre><code class="prism language-bash"><span class="token function">import</span> pandas as pd <span class="token function">import</span> pyarrow as pa <span class="token function">import</span> pyarrow.parquet as pq  <span class="token comment"># 定义 Schema</span> schema <span class="token operator">=</span> pa.schema<span class="token punctuation">(</span><span class="token punctuation">[</span>     <span class="token punctuation">(</span><span class="token string">'id'</span>, pa.int32<span class="token punctuation">(</span><span class="token punctuation">))</span>,     <span class="token punctuation">(</span><span class="token string">'email'</span>, pa.string<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 准备数据</span> ids <span class="token operator">=</span> pa.array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">]</span>, <span class="token builtin class-name">type</span> <span class="token operator">=</span> pa.int32<span class="token punctuation">(</span><span class="token punctuation">))</span> emails <span class="token operator">=</span> pa.array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'first@example.com'</span>, <span class="token string">'second@example.com'</span><span class="token punctuation">]</span>, pa.string<span class="token punctuation">(</span><span class="token punctuation">))</span>  <span class="token comment"># 生成 Parquet 数据</span> batch <span class="token operator">=</span> pa.RecordBatch.from_arrays<span class="token punctuation">(</span>     <span class="token punctuation">[</span>ids, emails<span class="token punctuation">]</span>,     schema <span class="token operator">=</span> schema <span class="token punctuation">)</span> table <span class="token operator">=</span> pa.Table.from_batches<span class="token punctuation">(</span><span class="token punctuation">[</span>batch<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 写 Parquet 文件 plain.parquet</span> pq.write_table<span class="token punctuation">(</span>table, <span class="token string">'plain.parquet'</span><span class="token punctuation">)</span> <span class="token function">import</span> pandas as pd  <span class="token function">import</span> pyarrow as pa  <span class="token function">import</span> pyarrow <span class="token builtin class-name">.</span> parquet as pq  <span class="token comment"># 定义 Schema</span>  schema <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> schema <span class="token punctuation">(</span> <span class="token punctuation">[</span>       <span class="token punctuation">(</span> <span class="token string">'id'</span> , pa <span class="token builtin class-name">.</span> int32 <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> ,       <span class="token punctuation">(</span> <span class="token string">'email'</span> , pa <span class="token builtin class-name">.</span> string <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token comment"># 准备数据</span>  ids <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> array <span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token number">1</span> , <span class="token number">2</span> <span class="token punctuation">]</span> , <span class="token builtin class-name">type</span> <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> int32 <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>  emails <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> array <span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token string">'first@example.com'</span> , <span class="token string">'second@example.com'</span> <span class="token punctuation">]</span> , pa <span class="token builtin class-name">.</span> string <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment"># 生成 Parquet 数据</span>  batch <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> RecordBatch <span class="token builtin class-name">.</span> from_arrays <span class="token punctuation">(</span>       <span class="token punctuation">[</span> ids , emails <span class="token punctuation">]</span> ,       schema <span class="token operator">=</span> schema  <span class="token punctuation">)</span>  table <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> Table <span class="token builtin class-name">.</span> from_batches <span class="token punctuation">(</span> <span class="token punctuation">[</span> batch <span class="token punctuation">]</span> <span class="token punctuation">)</span> </code></pre> </h1> <p>pq . write_table ( table , ‘plain.parquet’ )</p> <h3> <a id="_Parquet__70" rel="nofollow"></a>验证 Parquet 数据文件</h3> <p>我们可以用工具 parquet-tools 来查看 plain.parquet 文件的数据和 Schema</p> <pre><code class="prism language-bash"> $ parquet-tools schema plain.parquet  message schema <span class="token punctuation">{<!-- --></span>      optional int32 <span class="token function">id</span><span class="token punctuation">;</span>      optional binary email <span class="token punctuation">(</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  $ parquet-tools <span class="token function">cat</span> --json plain.parquet  <span class="token punctuation">{<!-- --></span><span class="token string">"id"</span>:1,<span class="token string">"email"</span><span class="token builtin class-name">:</span><span class="token string">"first@example.com"</span><span class="token punctuation">}</span>  <span class="token punctuation">{<!-- --></span><span class="token string">"id"</span>:2,<span class="token string">"email"</span><span class="token builtin class-name">:</span><span class="token string">"second@example.com"</span><span class="token punctuation">}</span>  </code></pre> <p>没问题，与我们期望的一致。也可以用 pyarrow 代码来获取其中的 Schema 和数据</p> <pre><code class="prism language-bash">schema <span class="token operator">=</span> pq.read_schema<span class="token punctuation">(</span><span class="token string">'plain.parquet'</span><span class="token punctuation">)</span> print<span class="token punctuation">(</span>schema<span class="token punctuation">)</span>  <span class="token function">df</span> <span class="token operator">=</span> pd.read_parquet<span class="token punctuation">(</span><span class="token string">'plain.parquet'</span><span class="token punctuation">)</span> print<span class="token punctuation">(</span>df.to_json<span class="token punctuation">(</span><span class="token punctuation">))</span> schema <span class="token operator">=</span> pq <span class="token builtin class-name">.</span> read_schema <span class="token punctuation">(</span> <span class="token string">'plain.parquet'</span> <span class="token punctuation">)</span>  print <span class="token punctuation">(</span> schema <span class="token punctuation">)</span>  <span class="token function">df</span> <span class="token operator">=</span> pd <span class="token builtin class-name">.</span> read_parquet <span class="token punctuation">(</span> <span class="token string">'plain.parquet'</span> <span class="token punctuation">)</span>  print <span class="token punctuation">(</span> <span class="token function">df</span> <span class="token builtin class-name">.</span> to_json <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> </code></pre> <p>输出为</p> <pre><code class="prism language-bash">id: int32   -- field metadata --   PARQUET:field_id: <span class="token string">'1'</span> email: string   -- field metadata --   PARQUET:field_id: <span class="token string">'2'</span> <span class="token punctuation">{<!-- --></span><span class="token string">"id"</span>:<span class="token punctuation">{<!-- --></span><span class="token string">"0"</span>:1,<span class="token string">"1"</span>:2<span class="token punctuation">}</span>,<span class="token string">"email"</span>:<span class="token punctuation">{<!-- --></span><span class="token string">"0"</span><span class="token builtin class-name">:</span><span class="token string">"first@example.com"</span>,<span class="token string">"1"</span><span class="token builtin class-name">:</span><span class="token string">"second@example.com"</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token function">id</span> <span class="token builtin class-name">:</span> int32     -- field metadata --     PARQUET <span class="token builtin class-name">:</span> field_id <span class="token builtin class-name">:</span> <span class="token string">'1'</span>  email <span class="token builtin class-name">:</span> string     -- field metadata --     PARQUET <span class="token builtin class-name">:</span> field_id <span class="token builtin class-name">:</span> <span class="token string">'2'</span>  <span class="token punctuation">{<!-- --></span> <span class="token string">"id"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{<!-- --></span> <span class="token string">"0"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> , <span class="token string">"1"</span> <span class="token builtin class-name">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> , <span class="token string">"email"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{<!-- --></span> <span class="token string">"0"</span> <span class="token builtin class-name">:</span> <span class="token string">"first@example.com"</span> , <span class="token string">"1"</span> <span class="token builtin class-name">:</span> <span class="token string">"second@example.com"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="_119" rel="nofollow"></a>含嵌套字段定义</h3> <p>下面的 Schema 定义加入一个嵌套对象，在 address 下分 email_address 和 post_address，Schema 定义及生成 Parquet 文件的代码如下</p> <pre><code class="prism language-bash"><span class="token function">import</span> pandas as pd <span class="token function">import</span> pyarrow as pa <span class="token function">import</span> pyarrow.parquet as pq  <span class="token comment"># 内部字段</span> address_fields <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token punctuation">(</span><span class="token string">'email_address'</span>, pa.string<span class="token punctuation">(</span><span class="token punctuation">))</span>,     <span class="token punctuation">(</span><span class="token string">'post_address'</span>, pa.string<span class="token punctuation">(</span><span class="token punctuation">))</span>, <span class="token punctuation">]</span>  <span class="token comment"># 定义 Parquet Schema，address 嵌套了 address_fields</span> schema <span class="token operator">=</span> pa.schema<span class="token punctuation">(</span>j<span class="token punctuation">)</span>  <span class="token comment"># 准备数据</span> ids <span class="token operator">=</span> pa.array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">]</span>, <span class="token builtin class-name">type</span> <span class="token operator">=</span> pa.int32<span class="token punctuation">(</span><span class="token punctuation">))</span> addresses <span class="token operator">=</span> pa.array<span class="token punctuation">(</span>     <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'first@example.com'</span>, <span class="token string">'city1'</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'second@example.com'</span>, <span class="token string">'city2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>,     pa.struct<span class="token punctuation">(</span>address_fields<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment"># 生成 Parquet 数据</span> batch <span class="token operator">=</span> pa.RecordBatch.from_arrays<span class="token punctuation">(</span>     <span class="token punctuation">[</span>ids, addresses<span class="token punctuation">]</span>,     schema <span class="token operator">=</span> schema <span class="token punctuation">)</span> table <span class="token operator">=</span> pa.Table.from_batches<span class="token punctuation">(</span><span class="token punctuation">[</span>batch<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 写 Parquet 数据到文件</span> pq.write_table<span class="token punctuation">(</span>table, <span class="token string">'nested.parquet'</span><span class="token punctuation">)</span> <span class="token function">import</span> pandas as pd  <span class="token function">import</span> pyarrow as pa  <span class="token function">import</span> pyarrow <span class="token builtin class-name">.</span> parquet as pq  <span class="token comment"># 内部字段</span>  address_fields <span class="token operator">=</span> <span class="token punctuation">[</span>       <span class="token punctuation">(</span> <span class="token string">'email_address'</span> , pa <span class="token builtin class-name">.</span> string <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> ,       <span class="token punctuation">(</span> <span class="token string">'post_address'</span> , pa <span class="token builtin class-name">.</span> string <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> ,  <span class="token punctuation">]</span>  <span class="token comment"># 定义 Parquet Schema，address 嵌套了 address_fields</span>  schema <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> schema <span class="token punctuation">(</span> j <span class="token punctuation">)</span>  <span class="token comment"># 准备数据</span>  ids <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> array <span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token number">1</span> , <span class="token number">2</span> <span class="token punctuation">]</span> , <span class="token builtin class-name">type</span> <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> int32 <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>  addresses <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> array <span class="token punctuation">(</span>       <span class="token punctuation">[</span> <span class="token punctuation">(</span> <span class="token string">'first@example.com'</span> , <span class="token string">'city1'</span> <span class="token punctuation">)</span> , <span class="token punctuation">(</span> <span class="token string">'second@example.com'</span> , <span class="token string">'city2'</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span> ,       pa <span class="token builtin class-name">.</span> struct <span class="token punctuation">(</span> address_fields <span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token comment"># 生成 Parquet 数据</span>  batch <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> RecordBatch <span class="token builtin class-name">.</span> from_arrays <span class="token punctuation">(</span>       <span class="token punctuation">[</span> ids , addresses <span class="token punctuation">]</span> ,       schema <span class="token operator">=</span> schema  <span class="token punctuation">)</span>  table <span class="token operator">=</span> pa <span class="token builtin class-name">.</span> Table <span class="token builtin class-name">.</span> from_batches <span class="token punctuation">(</span> <span class="token punctuation">[</span> batch <span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token comment"># 写 Parquet 数据到文件</span>  pq <span class="token builtin class-name">.</span> write_table <span class="token punctuation">(</span> table , <span class="token string">'nested.parquet'</span> <span class="token punctuation">)</span> </code></pre> <h3> <a id="_Parquet__201" rel="nofollow"></a>验证 Parquet 数据文件</h3> <p>同样用 parquet-tools 来查看下 nested.parquet 文件</p> <pre><code class="prism language-bash"> $ parquet-tools schema nested.parquet  message schema <span class="token punctuation">{<!-- --></span>      optional int32 <span class="token function">id</span><span class="token punctuation">;</span>      optional group address <span class="token punctuation">{<!-- --></span>          optional binary email_address <span class="token punctuation">(</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>          optional binary post_address <span class="token punctuation">(</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  $ parquet-tools <span class="token function">cat</span> --json nested.parquet  <span class="token punctuation">{<!-- --></span><span class="token string">"id"</span>:1,<span class="token string">"address"</span>:<span class="token punctuation">{<!-- --></span><span class="token string">"email_address"</span><span class="token builtin class-name">:</span><span class="token string">"first@example.com"</span>,<span class="token string">"post_address"</span><span class="token builtin class-name">:</span><span class="token string">"city1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token punctuation">{<!-- --></span><span class="token string">"id"</span>:2,<span class="token string">"address"</span>:<span class="token punctuation">{<!-- --></span><span class="token string">"email_address"</span><span class="token builtin class-name">:</span><span class="token string">"second@example.com"</span>,<span class="token string">"post_address"</span><span class="token builtin class-name">:</span><span class="token string">"city2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre> <p>用 <strong>parquet-tools</strong> 看到的 Schama 并没有 <strong>struct</strong> 的字样，但体现了它 address 与下级属性的嵌套关系。</p> <p>用 pyarrow 代码来读取 <strong>nested.parquet</strong> 文件的 Schema 和数据是什么样子</p> <pre><code class="prism language-bash">schema <span class="token operator">=</span> pq.read_schema<span class="token punctuation">(</span><span class="token string">"nested.parquet"</span><span class="token punctuation">)</span> print<span class="token punctuation">(</span>schema<span class="token punctuation">)</span>  <span class="token function">df</span> <span class="token operator">=</span> pd.read_parquet<span class="token punctuation">(</span><span class="token string">'nested.parquet'</span><span class="token punctuation">)</span> print<span class="token punctuation">(</span>df.to_json<span class="token punctuation">(</span><span class="token punctuation">))</span> schema <span class="token operator">=</span> pq <span class="token builtin class-name">.</span> read_schema <span class="token punctuation">(</span> <span class="token string">"nested.parquet"</span> <span class="token punctuation">)</span>  print <span class="token punctuation">(</span> schema <span class="token punctuation">)</span>  <span class="token function">df</span> <span class="token operator">=</span> pd <span class="token builtin class-name">.</span> read_parquet <span class="token punctuation">(</span> <span class="token string">'nested.parquet'</span> <span class="token punctuation">)</span>  print <span class="token punctuation">(</span> <span class="token function">df</span> <span class="token builtin class-name">.</span> to_json <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> </code></pre> <pre><code class="prism language-bash">id: int32   -- field metadata --   PARQUET:field_id: <span class="token string">'1'</span> address: struct<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>email_address: string, post_address: string<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>   child <span class="token number">0</span>, email_address: string     -- field metadata --     PARQUET:field_id: <span class="token string">'3'</span>   child <span class="token number">1</span>, post_address: string     -- field metadata --     PARQUET:field_id: <span class="token string">'4'</span>   -- field metadata --   PARQUET:field_id: <span class="token string">'2'</span> <span class="token punctuation">{<!-- --></span><span class="token string">"id"</span>:<span class="token punctuation">{<!-- --></span><span class="token string">"0"</span>:1,<span class="token string">"1"</span>:2<span class="token punctuation">}</span>,<span class="token string">"address"</span>:<span class="token punctuation">{<!-- --></span><span class="token string">"0"</span>:<span class="token punctuation">{<!-- --></span><span class="token string">"email_address"</span><span class="token builtin class-name">:</span><span class="token string">"first@example.com"</span>,<span class="token string">"post_address"</span><span class="token builtin class-name">:</span><span class="token string">"city1"</span><span class="token punctuation">}</span>,<span class="token string">"1"</span>:<span class="token punctuation">{<!-- --></span><span class="token string">"email_address"</span><span class="token builtin class-name">:</span><span class="token string">"second@example.com"</span>,<span class="token string">"post_address"</span><span class="token builtin class-name">:</span><span class="token string">"city2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token function">id</span> <span class="token builtin class-name">:</span> int32     -- field metadata --     PARQUET <span class="token builtin class-name">:</span> field_id <span class="token builtin class-name">:</span> <span class="token string">'1'</span>  address <span class="token builtin class-name">:</span> struct <span class="token operator">&amp;</span> lt <span class="token punctuation">;</span> email_address <span class="token builtin class-name">:</span> string , post_address <span class="token builtin class-name">:</span> string <span class="token operator">&amp;</span> gt <span class="token punctuation">;</span>     child <span class="token number">0</span> , email_address <span class="token builtin class-name">:</span> string       -- field metadata --       PARQUET <span class="token builtin class-name">:</span> field_id <span class="token builtin class-name">:</span> <span class="token string">'3'</span>     child <span class="token number">1</span> , post_address <span class="token builtin class-name">:</span> string       -- field metadata --       PARQUET <span class="token builtin class-name">:</span> field_id <span class="token builtin class-name">:</span> <span class="token string">'4'</span>     -- field metadata --     PARQUET <span class="token builtin class-name">:</span> field_id <span class="token builtin class-name">:</span> <span class="token string">'2'</span>  <span class="token punctuation">{<!-- --></span> <span class="token string">"id"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{<!-- --></span> <span class="token string">"0"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> , <span class="token string">"1"</span> <span class="token builtin class-name">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> , <span class="token string">"address"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{<!-- --></span> <span class="token string">"0"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{<!-- --></span> <span class="token string">"email_address"</span> <span class="token builtin class-name">:</span> <span class="token string">"first@example.com"</span> , <span class="token string">"post_address"</span> <span class="token builtin class-name">:</span> <span class="token string">"city1"</span> <span class="token punctuation">}</span> , <span class="token string">"1"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{<!-- --></span> <span class="token string">"email_address"</span> <span class="token builtin class-name">:</span> <span class="token string">"second@example.com"</span> , <span class="token string">"post_address"</span> <span class="token builtin class-name">:</span> <span class="token string">"city2"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>数据当然是一样的，有略微不同的是显示的 Schema 中, address 标识为 <strong>struct&lt;email_address: string, post_address: string&gt;</strong> , 明确的表明它是一个 <strong>struct</strong> 类型，而不是只展示嵌套层次。</p> <p>最后留下一个问题，前面我们定义 Parquet Schema 都是在 Python 代码中完成了，Parquet 是否也能像 Avro 一样用外部文件来定义 Schema, 然后编译给 Python 用？</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-27795.htm">宠物领养协议书范本图片模板大全 宠物领养协议书范本图片模板大全集</a></p>
                                        <p>下一个：<a href="/news/article-28255.htm">动物医院取什么名字比较好一点（动物医院取什么名字比较好一点的）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-12-7-node-share-links.htm" title="「12月7日」最高速度21.6M/S，2024年Surge每天更新免费节点订阅链接">「12月7日」最高速度21.6M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-24999.htm" title="【c语言】杨氏矩阵  有一个二维数组. 数组的每行从左到右是递增的，每列从上到下是递增的. 在这样的数组中查找一个数字是否存在。 时间复杂度小于O(N);">【c语言】杨氏矩阵  有一个二维数组. 数组的每行从左到右是递增的，每列从上到下是递增的. 在这样的数组中查找一个数字是否存在。 时间复杂度小于O(N);</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-2-free-subscribe-node.htm" title="「11月2日」最高速度22.3M/S，2024年Surge每天更新免费节点订阅链接">「11月2日」最高速度22.3M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-23158.htm" title="中北镇天宠宠物医院电话（天津市天宠宠物医院）">中北镇天宠宠物医院电话（天津市天宠宠物医院）</a></li>
                        <li class="py-2"><a href="/news/article-28254.htm" title="用 Python 定义 Schema 并生成 Parquet 文件">用 Python 定义 Schema 并生成 Parquet 文件</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-14-free-subscribe-node.htm" title="「11月14日」最高速度21.2M/S，2024年Surge每天更新免费节点订阅链接">「11月14日」最高速度21.2M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-12-free-subscribe-node.htm" title="「11月12日」最高速度21.2M/S，2024年Surge每天更新免费节点订阅链接">「11月12日」最高速度21.2M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-30-free-node-subscribe-links.htm" title="「7月30日」最高速度20.6M/S，2024年Surge每天更新免费节点订阅链接">「7月30日」最高速度20.6M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-28-free-subscribe-node.htm" title="「11月28日」最高速度19.9M/S，2024年Surge每天更新免费节点订阅链接">「11月28日」最高速度19.9M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-27-free-node-subscribe.htm" title="「11月27日」最高速度22.4M/S，2024年Surge每天更新免费节点订阅链接">「11月27日」最高速度22.4M/S，2024年Surge每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">63</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">9</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
                <!-- service close -->
            </div>
        </div>
        <!-- service-section close -->
    </div>
        <!-- footer start -->
    <div class="tiny-footer">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    Surge Node节点订阅站 版权所有 Powered by WordPress
                </div>
            </div>
        </div>
    </div>
    <!-- footer close -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/website/js/frontend/surgenode/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/website/js/frontend/surgenode/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/surgenode/menumaker.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/surgenode/navigation.js" type="text/javascript"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>